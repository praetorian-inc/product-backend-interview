package praetorian.vulnviewer.vulnViewer.dao;

import lombok.AllArgsConstructor;
import lombok.NonNull;
import lombok.experimental.FieldDefaults;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import praetorian.vulnviewer.vulnViewer.dao.sql.SQLService;
import praetorian.vulnviewer.vulnViewer.dto.UserDto;
import praetorian.vulnviewer.vulnViewer.dto.VulnerabilityDto;

import java.util.Set;
import java.util.StringJoiner;
import java.util.UUID;
import java.util.stream.Collectors;

import static lombok.AccessLevel.PRIVATE;

@Component
@AllArgsConstructor(onConstructor = @__(@Autowired))
@FieldDefaults(makeFinal = true, level = PRIVATE)
public class VulnerabilityDao {

  @NonNull
  SQLService<VulnerabilityDto> sqlService;

  @NonNull
  UserDao userDao;

  public VulnerabilityDto getVulnerability(@NonNull final UUID vulnerabilityId) {
    return sqlService.findOne("SELECT * FROM Vulnerabilities WHERE id = " + vulnerabilityId.toString());
  }

  public Set<VulnerabilityDto> getVulnerabilitiesForProject(@PathVariable @NonNull final UUID projectId) {
    return sqlService
      .findAll("SELECT * FROM Vulnerabilities WHERE projectId = " + projectId.toString())
      .collect(Collectors.toSet());
  }

  public Set<VulnerabilityDto> getVulnerabilitiesForUser(@PathVariable @NonNull final UUID userId) {

    final UserDto userDto = userDao.getUserById(userId);

    return sqlService
      .findAll("SELECT * FROM Vulnerabilities WHERE projectId IN ("
        + String.join(
          ", ",
          userDto
            .getProjectIds()
            .stream()
            .map(UUID::toString)
            .collect(Collectors.toList()))
        + ")")
      .collect(Collectors.toSet());
  }

  public VulnerabilityDto upsertVulnerability(@RequestBody @NonNull final VulnerabilityDto vulnerabilityDto) {

    sqlService.upsert(vulnerabilityDto);

    return sqlService.findOne("SELECT * FROM Vulnerabilities WHERE id = " + vulnerabilityDto.getId().toString());
  }
}
